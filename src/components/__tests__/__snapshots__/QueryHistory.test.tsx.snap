// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<QueryHistory/> renders correctly 1`] = `
<Component
  clear={[MockFunction]}
  history={
    Array [
      Object {
        "date": "22-34",
        "parameters": Object {
          "queryString": "hjhjhjh",
          "what": "artist",
        },
        "queryId": "23re",
        "result": Array [
          Object {
            "catno": "ff45",
            "cover_image": "url",
            "id": 1,
            "title": "Jason",
            "year": "1989",
          },
          Object {
            "catno": "787r",
            "cover_image": "url",
            "id": 2,
            "title": "Olion",
            "year": "1955",
          },
        ],
      },
      Object {
        "date": "22-34",
        "parameters": Object {
          "queryString": "hjhjhjh",
          "what": "artist",
        },
        "queryId": "zzz",
        "result": Array [
          Object {
            "catno": "ff45",
            "cover_image": "url",
            "id": 1,
            "title": "Jason",
            "year": "1989",
          },
          Object {
            "catno": "787r",
            "cover_image": "url",
            "id": 2,
            "title": "Olion",
            "year": "1955",
          },
        ],
      },
    ]
  }
  update={[MockFunction]}
>
  <div>
    <WithStyles(ForwardRef(Typography))
      gutterBottom={true}
      variant="h4"
    >
      <ForwardRef(Typography)
        classes={
          Object {
            "alignCenter": "MuiTypography-alignCenter",
            "alignJustify": "MuiTypography-alignJustify",
            "alignLeft": "MuiTypography-alignLeft",
            "alignRight": "MuiTypography-alignRight",
            "body1": "MuiTypography-body1",
            "body2": "MuiTypography-body2",
            "button": "MuiTypography-button",
            "caption": "MuiTypography-caption",
            "colorError": "MuiTypography-colorError",
            "colorInherit": "MuiTypography-colorInherit",
            "colorPrimary": "MuiTypography-colorPrimary",
            "colorSecondary": "MuiTypography-colorSecondary",
            "colorTextPrimary": "MuiTypography-colorTextPrimary",
            "colorTextSecondary": "MuiTypography-colorTextSecondary",
            "displayBlock": "MuiTypography-displayBlock",
            "displayInline": "MuiTypography-displayInline",
            "gutterBottom": "MuiTypography-gutterBottom",
            "h1": "MuiTypography-h1",
            "h2": "MuiTypography-h2",
            "h3": "MuiTypography-h3",
            "h4": "MuiTypography-h4",
            "h5": "MuiTypography-h5",
            "h6": "MuiTypography-h6",
            "noWrap": "MuiTypography-noWrap",
            "overline": "MuiTypography-overline",
            "paragraph": "MuiTypography-paragraph",
            "root": "MuiTypography-root",
            "srOnly": "MuiTypography-srOnly",
            "subtitle1": "MuiTypography-subtitle1",
            "subtitle2": "MuiTypography-subtitle2",
          }
        }
        gutterBottom={true}
        variant="h4"
      >
        <h4
          className="MuiTypography-root MuiTypography-h4 MuiTypography-gutterBottom"
        >
          Query History
        </h4>
      </ForwardRef(Typography)>
    </WithStyles(ForwardRef(Typography))>
    <WithStyles(ForwardRef(Button))
      color="primary"
      id="button_clear"
      onClick={[MockFunction]}
      variant="contained"
    >
      <ForwardRef(Button)
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="primary"
        id="button_clear"
        onClick={[MockFunction]}
        variant="contained"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-contained MuiButton-containedPrimary"
          component="button"
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          id="button_clear"
          onClick={[MockFunction]}
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-contained MuiButton-containedPrimary"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            id="button_clear"
            onClick={[MockFunction]}
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
              disabled={false}
              id="button_clear"
              onBlur={[Function]}
              onClick={[MockFunction]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                Clear history
              </span>
              <NoSsr>
                <WithStyles(undefined)
                  center={false}
                >
                  <ForwardRef(TouchRipple)
                    center={false}
                    classes={
                      Object {
                        "child": "MuiTouchRipple-child",
                        "childLeaving": "MuiTouchRipple-childLeaving",
                        "childPulsate": "MuiTouchRipple-childPulsate",
                        "ripple": "MuiTouchRipple-ripple",
                        "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                        "rippleVisible": "MuiTouchRipple-rippleVisible",
                        "root": "MuiTouchRipple-root",
                      }
                    }
                  >
                    <span
                      className="MuiTouchRipple-root"
                    >
                      <TransitionGroup
                        childFactory={[Function]}
                        component={null}
                        exit={true}
                      />
                    </span>
                  </ForwardRef(TouchRipple)>
                </WithStyles(undefined)>
              </NoSsr>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
    <div>
      <WithStyles(ForwardRef(ListItem))
        key="0"
      >
        <ForwardRef(ListItem)
          classes={
            Object {
              "alignItemsFlexStart": "MuiListItem-alignItemsFlexStart",
              "button": "MuiListItem-button",
              "container": "MuiListItem-container",
              "dense": "MuiListItem-dense",
              "disabled": "Mui-disabled",
              "divider": "MuiListItem-divider",
              "focusVisible": "Mui-focusVisible",
              "gutters": "MuiListItem-gutters",
              "root": "MuiListItem-root",
              "secondaryAction": "MuiListItem-secondaryAction",
              "selected": "Mui-selected",
            }
          }
        >
          <li
            className="MuiListItem-root MuiListItem-gutters"
            disabled={false}
          >
            <WithStyles(ForwardRef(ListItemText))
              key=".0"
            >
              <ForwardRef(ListItemText)
                classes={
                  Object {
                    "dense": "MuiListItemText-dense",
                    "inset": "MuiListItemText-inset",
                    "multiline": "MuiListItemText-multiline",
                    "primary": "MuiListItemText-primary",
                    "root": "MuiListItemText-root",
                    "secondary": "MuiListItemText-secondary",
                  }
                }
              >
                <div
                  className="MuiListItemText-root"
                >
                  <WithStyles(ForwardRef(Typography))
                    gutterBottom={true}
                    variant="body1"
                  >
                    <ForwardRef(Typography)
                      classes={
                        Object {
                          "alignCenter": "MuiTypography-alignCenter",
                          "alignJustify": "MuiTypography-alignJustify",
                          "alignLeft": "MuiTypography-alignLeft",
                          "alignRight": "MuiTypography-alignRight",
                          "body1": "MuiTypography-body1",
                          "body2": "MuiTypography-body2",
                          "button": "MuiTypography-button",
                          "caption": "MuiTypography-caption",
                          "colorError": "MuiTypography-colorError",
                          "colorInherit": "MuiTypography-colorInherit",
                          "colorPrimary": "MuiTypography-colorPrimary",
                          "colorSecondary": "MuiTypography-colorSecondary",
                          "colorTextPrimary": "MuiTypography-colorTextPrimary",
                          "colorTextSecondary": "MuiTypography-colorTextSecondary",
                          "displayBlock": "MuiTypography-displayBlock",
                          "displayInline": "MuiTypography-displayInline",
                          "gutterBottom": "MuiTypography-gutterBottom",
                          "h1": "MuiTypography-h1",
                          "h2": "MuiTypography-h2",
                          "h3": "MuiTypography-h3",
                          "h4": "MuiTypography-h4",
                          "h5": "MuiTypography-h5",
                          "h6": "MuiTypography-h6",
                          "noWrap": "MuiTypography-noWrap",
                          "overline": "MuiTypography-overline",
                          "paragraph": "MuiTypography-paragraph",
                          "root": "MuiTypography-root",
                          "srOnly": "MuiTypography-srOnly",
                          "subtitle1": "MuiTypography-subtitle1",
                          "subtitle2": "MuiTypography-subtitle2",
                        }
                      }
                      gutterBottom={true}
                      variant="body1"
                    >
                      <p
                        className="MuiTypography-root MuiTypography-body1 MuiTypography-gutterBottom"
                      >
                        artist
                         =
                         
                        hjhjhjh
                        <br />
                        22-34
                        <br />
                      </p>
                    </ForwardRef(Typography)>
                  </WithStyles(ForwardRef(Typography))>
                </div>
              </ForwardRef(ListItemText)>
            </WithStyles(ForwardRef(ListItemText))>
            <WithStyles(ForwardRef(Button))
              color="secondary"
              key=".1"
              onClick={[Function]}
              variant="contained"
            >
              <ForwardRef(Button)
                classes={
                  Object {
                    "colorInherit": "MuiButton-colorInherit",
                    "contained": "MuiButton-contained",
                    "containedPrimary": "MuiButton-containedPrimary",
                    "containedSecondary": "MuiButton-containedSecondary",
                    "containedSizeLarge": "MuiButton-containedSizeLarge",
                    "containedSizeSmall": "MuiButton-containedSizeSmall",
                    "disableElevation": "MuiButton-disableElevation",
                    "disabled": "Mui-disabled",
                    "endIcon": "MuiButton-endIcon",
                    "focusVisible": "Mui-focusVisible",
                    "fullWidth": "MuiButton-fullWidth",
                    "iconSizeLarge": "MuiButton-iconSizeLarge",
                    "iconSizeMedium": "MuiButton-iconSizeMedium",
                    "iconSizeSmall": "MuiButton-iconSizeSmall",
                    "label": "MuiButton-label",
                    "outlined": "MuiButton-outlined",
                    "outlinedPrimary": "MuiButton-outlinedPrimary",
                    "outlinedSecondary": "MuiButton-outlinedSecondary",
                    "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                    "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                    "root": "MuiButton-root",
                    "sizeLarge": "MuiButton-sizeLarge",
                    "sizeSmall": "MuiButton-sizeSmall",
                    "startIcon": "MuiButton-startIcon",
                    "text": "MuiButton-text",
                    "textPrimary": "MuiButton-textPrimary",
                    "textSecondary": "MuiButton-textSecondary",
                    "textSizeLarge": "MuiButton-textSizeLarge",
                    "textSizeSmall": "MuiButton-textSizeSmall",
                  }
                }
                color="secondary"
                onClick={[Function]}
                variant="contained"
              >
                <WithStyles(ForwardRef(ButtonBase))
                  className="MuiButton-root MuiButton-contained MuiButton-containedSecondary"
                  component="button"
                  disabled={false}
                  focusRipple={true}
                  focusVisibleClassName="Mui-focusVisible"
                  onClick={[Function]}
                  type="button"
                >
                  <ForwardRef(ButtonBase)
                    className="MuiButton-root MuiButton-contained MuiButton-containedSecondary"
                    classes={
                      Object {
                        "disabled": "Mui-disabled",
                        "focusVisible": "Mui-focusVisible",
                        "root": "MuiButtonBase-root",
                      }
                    }
                    component="button"
                    disabled={false}
                    focusRipple={true}
                    focusVisibleClassName="Mui-focusVisible"
                    onClick={[Function]}
                    type="button"
                  >
                    <button
                      className="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedSecondary"
                      disabled={false}
                      onBlur={[Function]}
                      onClick={[Function]}
                      onDragLeave={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onKeyUp={[Function]}
                      onMouseDown={[Function]}
                      onMouseLeave={[Function]}
                      onMouseUp={[Function]}
                      onTouchEnd={[Function]}
                      onTouchMove={[Function]}
                      onTouchStart={[Function]}
                      tabIndex={0}
                      type="button"
                    >
                      <span
                        className="MuiButton-label"
                      >
                        Delete
                      </span>
                      <NoSsr>
                        <WithStyles(undefined)
                          center={false}
                        >
                          <ForwardRef(TouchRipple)
                            center={false}
                            classes={
                              Object {
                                "child": "MuiTouchRipple-child",
                                "childLeaving": "MuiTouchRipple-childLeaving",
                                "childPulsate": "MuiTouchRipple-childPulsate",
                                "ripple": "MuiTouchRipple-ripple",
                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                "root": "MuiTouchRipple-root",
                              }
                            }
                          >
                            <span
                              className="MuiTouchRipple-root"
                            >
                              <TransitionGroup
                                childFactory={[Function]}
                                component={null}
                                exit={true}
                              />
                            </span>
                          </ForwardRef(TouchRipple)>
                        </WithStyles(undefined)>
                      </NoSsr>
                    </button>
                  </ForwardRef(ButtonBase)>
                </WithStyles(ForwardRef(ButtonBase))>
              </ForwardRef(Button)>
            </WithStyles(ForwardRef(Button))>
          </li>
        </ForwardRef(ListItem)>
      </WithStyles(ForwardRef(ListItem))>
      <WithStyles(ForwardRef(ListItem))
        key="1"
      >
        <ForwardRef(ListItem)
          classes={
            Object {
              "alignItemsFlexStart": "MuiListItem-alignItemsFlexStart",
              "button": "MuiListItem-button",
              "container": "MuiListItem-container",
              "dense": "MuiListItem-dense",
              "disabled": "Mui-disabled",
              "divider": "MuiListItem-divider",
              "focusVisible": "Mui-focusVisible",
              "gutters": "MuiListItem-gutters",
              "root": "MuiListItem-root",
              "secondaryAction": "MuiListItem-secondaryAction",
              "selected": "Mui-selected",
            }
          }
        >
          <li
            className="MuiListItem-root MuiListItem-gutters"
            disabled={false}
          >
            <WithStyles(ForwardRef(ListItemText))
              key=".0"
            >
              <ForwardRef(ListItemText)
                classes={
                  Object {
                    "dense": "MuiListItemText-dense",
                    "inset": "MuiListItemText-inset",
                    "multiline": "MuiListItemText-multiline",
                    "primary": "MuiListItemText-primary",
                    "root": "MuiListItemText-root",
                    "secondary": "MuiListItemText-secondary",
                  }
                }
              >
                <div
                  className="MuiListItemText-root"
                >
                  <WithStyles(ForwardRef(Typography))
                    gutterBottom={true}
                    variant="body1"
                  >
                    <ForwardRef(Typography)
                      classes={
                        Object {
                          "alignCenter": "MuiTypography-alignCenter",
                          "alignJustify": "MuiTypography-alignJustify",
                          "alignLeft": "MuiTypography-alignLeft",
                          "alignRight": "MuiTypography-alignRight",
                          "body1": "MuiTypography-body1",
                          "body2": "MuiTypography-body2",
                          "button": "MuiTypography-button",
                          "caption": "MuiTypography-caption",
                          "colorError": "MuiTypography-colorError",
                          "colorInherit": "MuiTypography-colorInherit",
                          "colorPrimary": "MuiTypography-colorPrimary",
                          "colorSecondary": "MuiTypography-colorSecondary",
                          "colorTextPrimary": "MuiTypography-colorTextPrimary",
                          "colorTextSecondary": "MuiTypography-colorTextSecondary",
                          "displayBlock": "MuiTypography-displayBlock",
                          "displayInline": "MuiTypography-displayInline",
                          "gutterBottom": "MuiTypography-gutterBottom",
                          "h1": "MuiTypography-h1",
                          "h2": "MuiTypography-h2",
                          "h3": "MuiTypography-h3",
                          "h4": "MuiTypography-h4",
                          "h5": "MuiTypography-h5",
                          "h6": "MuiTypography-h6",
                          "noWrap": "MuiTypography-noWrap",
                          "overline": "MuiTypography-overline",
                          "paragraph": "MuiTypography-paragraph",
                          "root": "MuiTypography-root",
                          "srOnly": "MuiTypography-srOnly",
                          "subtitle1": "MuiTypography-subtitle1",
                          "subtitle2": "MuiTypography-subtitle2",
                        }
                      }
                      gutterBottom={true}
                      variant="body1"
                    >
                      <p
                        className="MuiTypography-root MuiTypography-body1 MuiTypography-gutterBottom"
                      >
                        artist
                         =
                         
                        hjhjhjh
                        <br />
                        22-34
                        <br />
                      </p>
                    </ForwardRef(Typography)>
                  </WithStyles(ForwardRef(Typography))>
                </div>
              </ForwardRef(ListItemText)>
            </WithStyles(ForwardRef(ListItemText))>
            <WithStyles(ForwardRef(Button))
              color="secondary"
              key=".1"
              onClick={[Function]}
              variant="contained"
            >
              <ForwardRef(Button)
                classes={
                  Object {
                    "colorInherit": "MuiButton-colorInherit",
                    "contained": "MuiButton-contained",
                    "containedPrimary": "MuiButton-containedPrimary",
                    "containedSecondary": "MuiButton-containedSecondary",
                    "containedSizeLarge": "MuiButton-containedSizeLarge",
                    "containedSizeSmall": "MuiButton-containedSizeSmall",
                    "disableElevation": "MuiButton-disableElevation",
                    "disabled": "Mui-disabled",
                    "endIcon": "MuiButton-endIcon",
                    "focusVisible": "Mui-focusVisible",
                    "fullWidth": "MuiButton-fullWidth",
                    "iconSizeLarge": "MuiButton-iconSizeLarge",
                    "iconSizeMedium": "MuiButton-iconSizeMedium",
                    "iconSizeSmall": "MuiButton-iconSizeSmall",
                    "label": "MuiButton-label",
                    "outlined": "MuiButton-outlined",
                    "outlinedPrimary": "MuiButton-outlinedPrimary",
                    "outlinedSecondary": "MuiButton-outlinedSecondary",
                    "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                    "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                    "root": "MuiButton-root",
                    "sizeLarge": "MuiButton-sizeLarge",
                    "sizeSmall": "MuiButton-sizeSmall",
                    "startIcon": "MuiButton-startIcon",
                    "text": "MuiButton-text",
                    "textPrimary": "MuiButton-textPrimary",
                    "textSecondary": "MuiButton-textSecondary",
                    "textSizeLarge": "MuiButton-textSizeLarge",
                    "textSizeSmall": "MuiButton-textSizeSmall",
                  }
                }
                color="secondary"
                onClick={[Function]}
                variant="contained"
              >
                <WithStyles(ForwardRef(ButtonBase))
                  className="MuiButton-root MuiButton-contained MuiButton-containedSecondary"
                  component="button"
                  disabled={false}
                  focusRipple={true}
                  focusVisibleClassName="Mui-focusVisible"
                  onClick={[Function]}
                  type="button"
                >
                  <ForwardRef(ButtonBase)
                    className="MuiButton-root MuiButton-contained MuiButton-containedSecondary"
                    classes={
                      Object {
                        "disabled": "Mui-disabled",
                        "focusVisible": "Mui-focusVisible",
                        "root": "MuiButtonBase-root",
                      }
                    }
                    component="button"
                    disabled={false}
                    focusRipple={true}
                    focusVisibleClassName="Mui-focusVisible"
                    onClick={[Function]}
                    type="button"
                  >
                    <button
                      className="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedSecondary"
                      disabled={false}
                      onBlur={[Function]}
                      onClick={[Function]}
                      onDragLeave={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onKeyUp={[Function]}
                      onMouseDown={[Function]}
                      onMouseLeave={[Function]}
                      onMouseUp={[Function]}
                      onTouchEnd={[Function]}
                      onTouchMove={[Function]}
                      onTouchStart={[Function]}
                      tabIndex={0}
                      type="button"
                    >
                      <span
                        className="MuiButton-label"
                      >
                        Delete
                      </span>
                      <NoSsr>
                        <WithStyles(undefined)
                          center={false}
                        >
                          <ForwardRef(TouchRipple)
                            center={false}
                            classes={
                              Object {
                                "child": "MuiTouchRipple-child",
                                "childLeaving": "MuiTouchRipple-childLeaving",
                                "childPulsate": "MuiTouchRipple-childPulsate",
                                "ripple": "MuiTouchRipple-ripple",
                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                "root": "MuiTouchRipple-root",
                              }
                            }
                          >
                            <span
                              className="MuiTouchRipple-root"
                            >
                              <TransitionGroup
                                childFactory={[Function]}
                                component={null}
                                exit={true}
                              />
                            </span>
                          </ForwardRef(TouchRipple)>
                        </WithStyles(undefined)>
                      </NoSsr>
                    </button>
                  </ForwardRef(ButtonBase)>
                </WithStyles(ForwardRef(ButtonBase))>
              </ForwardRef(Button)>
            </WithStyles(ForwardRef(Button))>
          </li>
        </ForwardRef(ListItem)>
      </WithStyles(ForwardRef(ListItem))>
    </div>
  </div>
</Component>
`;
